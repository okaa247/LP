# Generated by Django 5.0.7 on 2024-07-25 23:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import shortuuidfield.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(default='000', max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('fullname', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('state', models.CharField(blank=True, max_length=200, null=True)),
                ('lga', models.CharField(blank=True, max_length=200, null=True)),
                ('ward', models.CharField(blank=True, max_length=200, null=True)),
                ('pollingunit', models.CharField(blank=True, max_length=200, null=True)),
                ('userimage', models.ImageField(upload_to='user')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('membership_id', shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22, unique=True)),
                ('role', models.CharField(choices=[('citizen', 'Citizen'), ('ward_leader', 'Ward Leader'), ('ward_secretary', 'Ward Secretary'), ('ward_treasurer', 'Ward Treasurer'), ('lga_coordinator', 'LGA Coordinator'), ('lga_secretary', 'LGA Secretary'), ('lga_treasurer', 'LGA Treasurer'), ('state_coordinator', 'State Coordinator'), ('state_secretary', 'State Secretary'), ('state_treasurer', 'State Treasurer'), ('national_coordinator', 'National Coordinator'), ('national_secretary', 'National Secretary'), ('national_treasurer', 'National Treasurer')], default='citizen', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_registration_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_registration_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
